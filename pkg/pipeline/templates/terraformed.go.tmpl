{{ .Header }}

{{ .GenStatement }}

package {{ .APIVersion }}

import (
	"dario.cat/mergo"
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/v2/pkg/resource"
	"github.com/crossplane/upjet/v2/pkg/resource/json"
	{{ .Imports }}
)

// GetTerraformResourceType returns Terraform resource type for this {{ .CRD.Kind }}
func (mg *{{ .CRD.Kind }}) GetTerraformResourceType() string {
    return "{{ .Terraform.ResourceType }}"
}

// GetConnectionDetailsMapping for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetConnectionDetailsMapping() map[string]string {
  {{- if .Sensitive.Fields }}
  return map[string]string{ {{range $k, $v := .Sensitive.Fields}}"{{ $k }}": "{{ $v}}", {{end}} }
  {{- else }}
  return nil
  {{- end }}
}

// GetObservation of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetObservation() (map[string]any, error) {
    o, err := json.TFParser.Marshal(tr.Status.AtProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) SetObservation(obs map[string]any) error {
    p, err := json.TFParser.Marshal(obs)
    if err != nil {
        return err
    }
    return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetID() string {
    if tr.Status.AtProvider.ID == nil {
        return ""
    }
    return *tr.Status.AtProvider.ID
}

// GetParameters of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetParameters() (map[string]any, error) {
    p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) SetParameters(params map[string]any) error {
    p, err := json.TFParser.Marshal(params)
    if err != nil {
        return err
    }
    return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetInitParameters() (map[string]any, error) {
    p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
    if err != nil {
        return nil, err
    }
    base := map[string]any{}
    return base, json.TFParser.Unmarshal(p, &base)
}

// GetInitParameters of this {{ .CRD.Kind }}
func (tr *{{ .CRD.Kind }}) GetMergedParameters(shouldMergeInitProvider bool) (map[string]any, error) {
    params, err := tr.GetParameters()
    if err != nil {
        return nil, errors.Wrapf(err, "cannot get parameters for resource \"%s/%s\"", tr.GetNamespace(), tr.GetName())
    }
    if !shouldMergeInitProvider {
        return params, nil
    }

    initParams, err := tr.GetInitParameters()
    if err != nil {
        return nil, errors.Wrapf(err, "cannot get init parameters for resource \"%s/%s\"", tr.GetNamespace(), tr.GetName())
    }

    // Note(lsviben): mergo.WithSliceDeepCopy is needed to merge the
    // slices from the initProvider to forProvider. As it also sets
    // overwrite to true, we need to set it back to false, we don't
    // want to overwrite the forProvider fields with the initProvider
    // fields.
    err = mergo.Merge(&params, initParams, mergo.WithSliceDeepCopy, func(c *mergo.Config) {
        c.Overwrite = false
    })
    if err != nil {
        return nil, errors.Wrapf(err, "cannot merge spec.initProvider and spec.forProvider parameters for resource \"%s/%s\"", tr.GetNamespace(), tr.GetName())
    }

    return params, nil
}

// LateInitialize this {{ .CRD.Kind }} using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *{{ .CRD.Kind }}) LateInitialize(attrs []byte) (bool, error) {
    params := &{{ .CRD.ParametersTypeName }}{}
    if err := json.TFParser.Unmarshal(attrs, params); err != nil {
        return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
    }
    opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
    {{ range .LateInitializer.IgnoredFields -}}
        opts = append(opts, resource.WithNameFilter("{{ . }}"))
    {{ end }}
    {{- if gt (len .LateInitializer.ConditionalIgnoredFields) 0 -}}
        initParams, err := tr.GetInitParameters()
        if err != nil {
            return false, errors.Wrapf(err, "cannot get init parameters for resource \"%s/%s\"", tr.GetNamespace(), tr.GetName())
        }
        {{ range .LateInitializer.ConditionalIgnoredFields -}}
            opts = append(opts, resource.WithConditionalFilter("{{ . }}", initParams))
        {{ end }}
    {{ end }}

    li := resource.NewGenericLateInitializer(opts...)
    return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *{{ .CRD.Kind }}) GetTerraformSchemaVersion() int {
    return {{ .Terraform.SchemaVersion }}
}
