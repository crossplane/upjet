# SPDX-FileCopyrightText: 2025 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC-BY-4.0

# CodeRabbit Configuration for Upjet
# This configuration is optimized for Upjet, the Crossplane provider code generation framework

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================

# Language for CodeRabbit reviews and comments (default: en-US, keeping explicit)
language: "en-US"

# Instructions for CodeRabbit's tone and style in reviews (max 250 chars)
tone_instructions: |
  Be collaborative and supportive. Ask clarifying questions rather than making
  assumptions. Focus on the 'why' behind decisions. Frame concerns
  constructively and thank contributors.

# Disable early-access features for stability
early_access: false

# =============================================================================
# REVIEWS
# =============================================================================

reviews:
  # Using "chill" profile to balance thoroughness with actionable feedback.
  # Upjet is a code generation framework, so reviews should focus on the
  # generator logic, configuration APIs, and generated template quality.
  profile: "chill"
  
  # Don't generate summary in PR description - let authors write their own
  high_level_summary: false
  
  # Include the high-level summary in the walkthrough comment instead
  high_level_summary_in_walkthrough: true
  
  # Collapse walkthrough comment to reduce visual clutter in PRs
  collapse_walkthrough: true
  
  # Enable automatic label application
  auto_apply_labels: true
  
  # Automatically assign suggested reviewers (disabled - let maintainers control)
  auto_assign_reviewers: false
  
  # Disable poem generation in walkthrough comments
  poem: false
  
  # Disable review status messages to reduce comment noise
  review_status: false
  
  # Focus reviews on source code, exclude generated and vendor files
  path_filters:
    # Include source code
    - "**/*.go"
    - "**/*.yaml"
    - "**/*.yml"
    - "**/*.md"
    - "**/*.proto"
    - "**/Dockerfile*"
    - "**/Earthfile"
    - "**/*.sh"
    
    # Exclude generated and vendor files
    - "!**/zz_generated*.go"
    - "!**/vendor/**"
    - "!**/node_modules/**"
    - "!**/*.pb.go"
    - "!**/*.pb.gw.go"
    - "!**/mock_*.go"
    - "!**/fake/**"
    - "!**/testdata/**"
    - "!**/dist/**"
    - "!**/build/**"
    - "!**/.tmp-earthly-out/**"
  
  # Path-specific instructions for different areas of the codebase
  path_instructions:
    - path: "**/*.go"
      instructions: |
        Enforce Upjet/Crossplane patterns: Use crossplane-runtime/pkg/errors
        for wrapping. Check variable naming (short for local scope, descriptive
        for wider scope). Ensure 'return early' pattern. Verify error scoping
        (declare in conditionals when possible). For nolint directives, require
        specific linter names and explanations. CRITICAL: Ensure all error
        messages are meaningful to provider developers (the end users of Upjet),
        not just Upjet maintainers - include context about what failed in the
        generation or configuration process and suggest next steps when possible.
    
    - path: "**/*_test.go"
      instructions: |
        Enforce table-driven test structure: PascalCase test names (no
        underscores), args/want pattern, use cmp.Diff with
        cmpopts.EquateErrors() for error testing. Check for proper test case
        naming and reason fields. Ensure no third-party test frameworks (no
        Ginkgo, Gomega, Testify).
    
    - path: "**/*.md"
      instructions: |
        Ensure Markdown files are wrapped at 100 columns for consistency and
        readability. Lines can be longer if it makes links more readable, but
        otherwise should wrap at 100 characters. Check for proper heading
        structure, clear language, and that documentation is helpful for users.
    
    - path: "**/pkg/pipeline/**"
      instructions: |
        Review code generation pipeline logic carefully. This is the core
        orchestration layer that generates CRDs, controllers, and manifests.
        Check for: proper error handling in generators, correct template
        rendering, idempotent generation (same input = same output), and
        backward compatibility of generated code. Ensure changes don't break
        existing provider builds. Pay attention to the order of generator
        execution and dependencies between generators.

    - path: "**/pkg/config/**"
      instructions: |
        This package defines the configuration API used by provider developers.
        Changes here directly impact all downstream providers. Review for:
        CRITICAL backward compatibility (breaking changes require major version
        bump), clear documentation with examples, sensible defaults, and
        validation of configuration options. External name configurations are
        required for all resources - verify this is enforced. Check that
        Reference configurations follow established patterns.

    - path: "**/pkg/terraform/**"
      instructions: |
        Review Terraform workspace management and execution logic. This code
        manages state files, executes Terraform operations (apply/plan/destroy),
        and handles the three execution modes (CLI, SDK v2, Framework). Pay
        attention to: proper cleanup of temporary files, error handling from
        Terraform operations, state file locking and consistency, and correct
        mode selection based on resource configuration. Ensure timeouts are
        respected and async operations are properly managed.

    - path: "**/pkg/types/**"
      instructions: |
        Review Go type generation from Terraform schemas. This code converts
        Terraform schema definitions into Go structs for CRDs. Check for:
        correct type mapping (Terraform types â†’ Go types), proper handling of
        nested objects and lists, correct field classification (ForProvider vs
        InitProvider vs AtProvider), and generated field names following Go
        and Kubernetes conventions. Ensure sensitive fields are properly marked.

    - path: "**/pkg/schema/**"
      instructions: |
        Review schema traversal and transformation logic. This package walks
        Terraform schemas recursively and applies transformations. Check for:
        correct handling of schema nesting, proper traversal of references
        between schemas, and correct application of schema transformers.
        Ensure edge cases like self-references and circular dependencies are
        handled properly.

    - path: "**/pkg/controller/**"
      instructions: |
        Review generated controller templates and runtime controller logic.
        This is NOT the same as internal/controller in Crossplane - these are
        templates and base implementations used by generated providers. Check
        for: proper Crossplane runtime integration, correct Observe/Create/
        Update/Delete implementations, proper error wrapping with context, and
        connection detail extraction. Ensure changes work across all three
        Terraform execution modes (CLI, SDK v2, Framework).

    - path: "**/pkg/resource/**"
      instructions: |
        Review the Terraformed interface and resource abstractions. This
        defines how generated resources interact with the runtime. Check for:
        interface compatibility, proper state management, correct external name
        extraction, and parameter/observation separation. Changes here affect
        all generated resources across all providers.

    - path: "**/cmd/scraper/**"
      instructions: |
        Review the documentation scraper tool that extracts metadata from
        Terraform provider documentation. Check for: robust HTML/Markdown
        parsing, correct extraction of examples and field descriptions, proper
        error handling for malformed docs, and output format consistency.

    - path: "**/cmd/resolver/**"
      instructions: |
        Review the resolver post-processing tool. This tool runs after code
        generation to update generated resolver files. Check for: correct file
        pattern matching, safe file modifications, and proper error reporting.
  
  # Automatic review settings
  auto_review:
    # Skip reviewing draft PRs until they're ready for review (default: false, keeping explicit)
    drafts: false
    
    # Skip reviews if PR title contains these keywords (case-insensitive)
    ignore_title_keywords:
      - "wip"
      - "draft"
      - "do not merge"
      - "dnm"
    
    # Skip reviews from these automated bot accounts
    ignore_usernames:
      - "dependabot[bot]"
      - "renovate[bot]"
      - "github-actions[bot]"
  
  # Quality gates that run during CodeRabbit's review to check PR readiness
  pre_merge_checks:
    # Check PR title for length and descriptiveness
    title:
      requirements: "Keep under 72 characters and be descriptive about what the change does."
    
    # Disable docstring coverage check (too noisy for Go projects)
    docstrings:
      mode: "off"
    
    # Custom checks specific to Upjet development practices
    custom_checks:
      - name: "Configuration API Breaking Changes"
        mode: "error"
        instructions: |
          Fails if changes to pkg/config/** remove or rename public exported
          types, functions, or fields, add new required parameters to existing
          functions, or change function signatures without label
          'breaking-change'. Configuration API changes affect all downstream
          providers and must be clearly marked.

      - name: "Generated Code Manual Edits"
        mode: "error"
        instructions: |
          Fails if changes are made to files matching 'zz_*.go' pattern.
          Generated code should never be manually edited - changes must be made
          to the generators in pkg/pipeline/** or templates instead. If this is
          a legitimate change to generator output, explain why in the PR
          description.

      - name: "Template Breaking Changes"
        mode: "warning"
        instructions: |
          Warns if changes to pkg/controller/external*.go templates
          significantly alter the generated controller behavior. Template
          changes affect all generated providers and should be tested with
          multiple providers before merging.
  
  # Disable automatic code generation features
  finishing_touches:
    # Disable automatic docstring generation
    docstrings:
      enabled: false

    # Disable automatic unit test generation  
    unit_tests:
      enabled: false

  # Tools - DISABLED: We prefer to run linting tools directly in CI
  # Our comprehensive golangci-lint setup with "default: all" already covers
  # most static analysis. Additional tools can be added to CI as needed.
  tools:
    # Go linting - disabled (we run golangci-lint with comprehensive config)
    golangci-lint:
      enabled: false
    
    # Security and vulnerability scanning - disabled (prefer direct CI integration)
    gitleaks:
      enabled: false
    
    semgrep:
      enabled: false
    
    osvScanner:
      enabled: false
    
    # File format linting - disabled (prefer direct CI integration)
    yamllint:
      enabled: false
    
    markdownlint:
      enabled: false
    
    shellcheck:
      enabled: false
    
    hadolint:
      enabled: false
    
    actionlint:
      enabled: false
    
    buf:
      enabled: false
    
    # GitHub integration - disabled for now
    github-checks:
      enabled: false

# =============================================================================
# CHAT
# Interactive chat with CodeRabbit in PR comments. You can ask questions like:
# - @coderabbitai explain this code generation logic
# - @coderabbitai what are the edge cases for this schema transformation?
# - @coderabbitai how does this affect downstream providers?
# - @coderabbitai what providers should I test this change with?
# =============================================================================

chat:
  # Disable ASCII/emoji art in responses
  art: false

# =============================================================================
# KNOWLEDGE BASE
# =============================================================================

knowledge_base:
  # Learn from Upjet's development guidelines and apply them during reviews
  code_guidelines:
    filePatterns:
      - "**/CONTRIBUTING.md"
      - "**/CLAUDE.md"
      - "**/README.md"

  # Enable MCP integration to provide context about external libraries and APIs
  mcp:
    usage: "enabled"
